<?xml version="1.0"?>
<launch>

  <arg name="scene_xml" default="$(find tiago_mujoco)/example/scene.xml.xacro"/>

  <!-- Robot Customization -->
  <arg name="rviz"        default="true"  doc="Should rviz be spawned?" />
  <arg name="moveit"      default="true"  doc="Should moveit motion planning be started?" />
  <arg name="use_moveit_camera"    default="false"/>

  <arg name="mujoco_plugin_config" default="$(find tiago_mujoco)/config/default_mjplugin_config.yaml"             doc="Location of param file containing the mujoco plugin config" />
  <arg name="use_sim_time"  default="true" doc="should mujoco publish its simulation time as ros time?"/>

  <!-- Needed for nesting this launchfile in test launchfiles -->
  <arg name="headless" default="false" />
  <arg name="unpause"  default="false" />
  <arg name="no_x"     default="false" />
  <arg name="verbose"  default="false" />

  <arg name="robot_namespace" default="" />
  <arg name="rgbd_sensors" default="false" />
  <arg name="multi" default="" />
  <arg name="xacro_args" default="" />
  <arg name="xacro_outpath" default="/tmp/$(env USER)_tiago.xml" />
  <arg name="robot_name" default="tiago" />

  <arg name="arm"  default="True"/>
  <arg name="wrist_model"  default="wrist-2017"/>
  <arg name="end_effector"  default="schunk-wsg"/>
  <arg name="ft_sensor"  default="schunk-ft"/>
  <arg name="laser_model"  default="sick-571"/>
  <arg name="camera_model"  default="orbbec-astra"/>
  <arg name="no_safety_eps" default="False"/>
  <arg name="robot_description" default="robot_description"/>
  <arg name="base_type"  default="pmb2"/>
  <arg name="description_calibration_dir" value="$(optenv pal_eye_hand_calibration_tiago_calibration_path)"/>
  <arg name="extrinsic_calibration_dir" value="$(optenv pal_camera_calibration_extrinsics_calibration_path)"/>

  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- <rosparam command="load" file="$(find pmb2_description)/config/joint_limits.yaml" /> -->
  
  <include file="$(find tiago_description)/robots/upload.launch" pass_all_args="true" />

  <rosparam ns="pal_robot_info" subst_value="true">
    type: "tiago"
    end_effector: "$(arg end_effector)"
    ft_sensor: "schunk-ft"
    laser_model: "sick-571"
    camera_model: "orbbec-astra"
    base_type: "pmb2"
    arm: "True"
  </rosparam>

  <param name="mujoco_xml"
         command="xacro $(arg scene_xml)
                  arm:=$(arg arm)
                  wrist_model:=$(arg wrist_model)
                  end_effector:=$(arg end_effector)
                  ft_sensor:=$(arg ft_sensor)
                  laser_model:=$(arg laser_model)
                  camera_model:=$(arg camera_model)
                  no_safety_eps:=$(arg no_safety_eps)
                  base_type:=$(arg base_type)
                  rgbd_sensors:=$(arg rgbd_sensors)
                  -o $(arg xacro_outpath)"> <!-- hack writing xml to file instead of using rosparam because of MuJoCo Bug -->
  </param>

  <!-- <rosparam file="$(arg mujoco_plugin_config)" subst_value="true" /> -->

  <include file="$(find mujoco_ros)/launch/launch_server.launch" pass_all_args="true" >
    <arg name="console_config_file"  value="$(find pmb2_mujoco)/config/rosconsole.config" />
    <arg name="modelfile" value="$(arg xacro_outpath)" />
    <arg name="initial_joint_states" value="$(find tiago_mujoco)/config/initial_joint_states.yaml"/>
    <!-- Not working because of MuJoCo Bug, see hack above -->
    <!-- <arg name="wait_for_xml" value="true" /> -->
  </include>

  <include file="$(find tiago_mujoco)/launch/tiago_controllers.launch" >
    <arg name="arm" value="$(arg arm)" />
    <arg name="end_effector" value="$(arg end_effector)" />
    <arg name="ft_sensor" value="$(arg ft_sensor)" />
    <arg name="laser_model" value="$(arg laser_model)" />
    <arg name="camera_model" value="$(arg camera_model)" />
    <arg name="robot_namespace" value="$(arg robot_namespace)" />
  </include>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50" />
    <param name="tf_static" type="string" value="" />
    <param name="use_tf_static" type="bool" value="true" />
  </node>

  <!-- <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" /> -->

  <node pkg="robot_pose" type="robot_pose_node" name="robot_pose_publisher" output="screen"/>

  <!-- TF lookup -->
  <node pkg="tf_lookup" type="tf_lookup" name="tf_lookup" output="screen" />

  <!-- Twist mux -->
  <include file="$(find tiago_bringup)/launch/twist_mux.launch" >
    <arg name="cmd_vel_out" value="mobile_base_controller/cmd_vel" />
  </include>

  <!-- Republish image_raw to image_rect_color to have the same available topic -->
  <node name="image_raw_to_rect_color_relay" pkg="topic_tools" type="relay" args="xtion/rgb/image_raw xtion/rgb/image_rect_color" />

  <group if="$(arg moveit)">
    <!-- Play motion -->
    <include file="$(find tiago_clf_launch)/launch/play_motion.launch" >
      <arg name="arm" value="$(arg arm)" />
      <arg name="end_effector" value="$(arg end_effector)" />
      <arg name="ft_sensor" value="$(arg ft_sensor)" />
    </include>

    <!-- Motion planning -->
    <include file="$(find tiago_moveit_config)/launch/move_group.launch" >
      <arg name="arm" value="$(arg arm)" />
      <arg name="end_effector" value="$(arg end_effector)" />
      <arg name="ft_sensor" value="$(arg ft_sensor)" />
      <arg name="laser_model" value="$(arg laser_model)" />
      <arg name="camera_model" value="$(arg camera_model)" />
      <arg name="camera" value="$(arg use_moveit_camera)" />
    </include>
  </group>

  <!-- Point head action -->
  <group ns="head_controller">
    <node name="point_head_action" pkg="head_action" type="head_action" output="screen" >
      <rosparam>
        pan_link: head_1_link
        tilt_link: head_2_link
        success_threshold: 0.01
      </rosparam>
    </node>
  </group>

  <!-- Add scan relay -->
  <node name="scan_to_scan_raw_relay" pkg="topic_tools" type="relay" args="scan scan_raw" />

  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find pmb2_description)/config/show.rviz" if="$(arg rviz)"/>

</launch>